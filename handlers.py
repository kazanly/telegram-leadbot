# handlers.py
from aiogram import Router, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, Contact, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from utils import save_to_google_sheets, notify_admin

form_router = Router()

class LeadForm(StatesGroup):
    language = State()
    name = State()
    phone = State()
    country = State()
    services = State()

texts = {
    "ru": {
        "start": "–ü—Ä–∏–≤–µ—Ç! üëã\n\n–Ø –ø–æ–º–æ–≥—É —Å–æ–±—Ä–∞—Ç—å –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –∏—Ö –Ω–∞–ø—Ä—è–º—É—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:",
        "name": "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
        "phone": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:",
        "phone_button": "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä",
        "country": "–ò–∑ –∫–∞–∫–æ–π –≤—ã —Å—Ç—Ä–∞–Ω—ã?",
        "services": "–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –í—ã–±–µ—Ä–∏—Ç–µ –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ:",
        "done": "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å",
        "options": [
            ("ü§ñ –ë–æ—Ç", "srv_bot"),
            ("üåê –õ–µ–Ω–¥–∏–Ω–≥", "srv_landing"),
            ("üìä –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è (Google/Notion/CRM)", "srv_auto"),
            ("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ", "srv_notify"),
            ("üóÇ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –±–∞–∑–∞", "srv_internal")
        ]
    },
    "en": {
        "start": "Hello! üëã\n\nI'll help collect your request and forward it directly to the developer.\nPlease select the language you prefer:",
        "name": "What's your name?",
        "phone": "Send your phone number via the button below:",
        "phone_button": "üì± Send phone number",
        "country": "Which country are you from?",
        "services": "What do you need? Choose all that apply:",
        "done": "‚úÖ Done",
        "options": [
            ("ü§ñ Bot", "srv_bot"),
            ("üåê Landing page", "srv_landing"),
            ("üìä Automation (Google/Notion/CRM)", "srv_auto"),
            ("üîî Lead notifications", "srv_notify"),
            ("üóÇ Internal database", "srv_internal")
        ]
    }
}

@form_router.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    await state.clear()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en")]
    ])
    await message.answer(texts["ru"]["start"], reply_markup=kb)

@form_router.callback_query(F.data.startswith("lang_"))
async def set_language(callback: CallbackQuery, state: FSMContext):
    lang = callback.data.split("_")[1]
    await state.update_data(language=lang)
    await callback.message.delete()
    await callback.message.answer(texts[lang]["name"])
    await state.set_state(LeadForm.name)

@form_router.message(LeadForm.name)
async def get_name(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(name=message.text)
    lang = data["language"]
    button = KeyboardButton(text=texts[lang]["phone_button"], request_contact=True)
    kb = ReplyKeyboardMarkup(keyboard=[[button]], resize_keyboard=True)
    await message.answer(texts[lang]["phone"], reply_markup=kb)
    await state.set_state(LeadForm.phone)

@form_router.message(LeadForm.phone, F.contact)
async def get_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    data = await state.get_data()
    await message.answer(texts[data["language"]]["country"], reply_markup=ReplyKeyboardRemove())
    await state.set_state(LeadForm.country)

@form_router.message(LeadForm.country)
async def get_country(message: Message, state: FSMContext):
    await state.update_data(country=message.text)
    data = await state.get_data()
    lang = data["language"]

    buttons = [[InlineKeyboardButton(text=label, callback_data=value)] for label, value in texts[lang]["options"]]
    buttons.append([InlineKeyboardButton(text=texts[lang]["done"], callback_data="done")])

    await state.update_data(services=[])
    await message.answer(texts[lang]["services"], reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await state.set_state(LeadForm.services)

@form_router.callback_query(LeadForm.services)
async def select_services(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    service_map = {
        "srv_bot": "–ë–æ—Ç",
        "srv_landing": "–õ–µ–Ω–¥–∏–Ω–≥",
        "srv_auto": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
        "srv_notify": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
        "srv_internal": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –±–∞–∑–∞"
    }

    if callback.data == "done":
        await callback.message.delete()
        await finalize(callback.message, state)
        return

    service = service_map.get(callback.data)
    if not service:
        return

    services = data.get("services", [])
    if service not in services:
        services.append(service)
        await state.update_data(services=services)

    await callback.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {service}")

async def finalize(message: Message, state: FSMContext):
    data = await state.get_data()
    await save_to_google_sheets(data)
    await notify_admin(data)

    lang = data.get("language", "ru")
    done_text = "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞." if lang == "ru" else "‚úÖ Thank you! Your request has been sent."
    await message.answer(done_text)
    await state.clear()
